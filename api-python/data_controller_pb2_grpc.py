# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_controller_pb2 as data__controller__pb2


class DataControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLastUpdatedDateTime = channel.unary_unary(
                '/data_controller.DataController/getLastUpdatedDateTime',
                request_serializer=data__controller__pb2.ArticleRequest.SerializeToString,
                response_deserializer=data__controller__pb2.LastUpdatedDateResponse.FromString,
                )
        self.createDump = channel.unary_unary(
                '/data_controller.DataController/createDump',
                request_serializer=data__controller__pb2.CreateDumpRequest.SerializeToString,
                response_deserializer=data__controller__pb2.DumpId.FromString,
                )
        self.updateDumpId = channel.unary_unary(
                '/data_controller.DataController/updateDumpId',
                request_serializer=data__controller__pb2.ArticleRequest.SerializeToString,
                response_deserializer=data__controller__pb2.UpdateDumpIdResponse.FromString,
                )
        self.purgeThenComplete = channel.unary_unary(
                '/data_controller.DataController/purgeThenComplete',
                request_serializer=data__controller__pb2.DumpId.SerializeToString,
                response_deserializer=data__controller__pb2.PurgeResponse.FromString,
                )
        self.updateArticle = channel.unary_unary(
                '/data_controller.DataController/updateArticle',
                request_serializer=data__controller__pb2.IndexUpdateRequest.SerializeToString,
                response_deserializer=data__controller__pb2.IndexUpdateResponse.FromString,
                )


class DataControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getLastUpdatedDateTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createDump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateDumpId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def purgeThenComplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLastUpdatedDateTime': grpc.unary_unary_rpc_method_handler(
                    servicer.getLastUpdatedDateTime,
                    request_deserializer=data__controller__pb2.ArticleRequest.FromString,
                    response_serializer=data__controller__pb2.LastUpdatedDateResponse.SerializeToString,
            ),
            'createDump': grpc.unary_unary_rpc_method_handler(
                    servicer.createDump,
                    request_deserializer=data__controller__pb2.CreateDumpRequest.FromString,
                    response_serializer=data__controller__pb2.DumpId.SerializeToString,
            ),
            'updateDumpId': grpc.unary_unary_rpc_method_handler(
                    servicer.updateDumpId,
                    request_deserializer=data__controller__pb2.ArticleRequest.FromString,
                    response_serializer=data__controller__pb2.UpdateDumpIdResponse.SerializeToString,
            ),
            'purgeThenComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.purgeThenComplete,
                    request_deserializer=data__controller__pb2.DumpId.FromString,
                    response_serializer=data__controller__pb2.PurgeResponse.SerializeToString,
            ),
            'updateArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.updateArticle,
                    request_deserializer=data__controller__pb2.IndexUpdateRequest.FromString,
                    response_serializer=data__controller__pb2.IndexUpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'data_controller.DataController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getLastUpdatedDateTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_controller.DataController/getLastUpdatedDateTime',
            data__controller__pb2.ArticleRequest.SerializeToString,
            data__controller__pb2.LastUpdatedDateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_controller.DataController/createDump',
            data__controller__pb2.CreateDumpRequest.SerializeToString,
            data__controller__pb2.DumpId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateDumpId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_controller.DataController/updateDumpId',
            data__controller__pb2.ArticleRequest.SerializeToString,
            data__controller__pb2.UpdateDumpIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def purgeThenComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_controller.DataController/purgeThenComplete',
            data__controller__pb2.DumpId.SerializeToString,
            data__controller__pb2.PurgeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_controller.DataController/updateArticle',
            data__controller__pb2.IndexUpdateRequest.SerializeToString,
            data__controller__pb2.IndexUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
